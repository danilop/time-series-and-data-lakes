-- Data is interpolated to fill missing vlaues and then put back into a flat model
WITH interpolated_timeseries AS (
  SELECT sensor_id,
       	 INTERPOLATE_LINEAR(
           CREATE_TIME_SERIES(time, measure_value::double),
           SEQUENCE(min(time), max(time), 1s)) AS interpolated_temperature,
         INTERPOLATE_LOCF(
           CREATE_TIME_SERIES(time, status),
           SEQUENCE(min(time), max(time), 1s)) AS locf_status
    FROM "TimeSeriesDb-Tc4D7m7fPQQd"."TimeSeriesRawTable-9vgA4lStVsUx"
   WHERE measure_name = 'temperature' AND time >= ago(15m)
   GROUP BY sensor_id
)
SELECT int.sensor_id, t.time, min(s.status) AS status, avg(t.temp) AS temperature
  FROM interpolated_timeseries AS int
 CROSS JOIN UNNEST(interpolated_temperature) AS t (time, temp)
 CROSS JOIN UNNEST(locf_status) AS s (time, status) 
 WHERE t.time = s.time
 GROUP BY int.sensor_id, t.time


-- Interpolation fills missing values in the time series
SELECT sensor_id,
        INTERPOLATE_LINEAR(
        CREATE_TIME_SERIES(time, measure_value::double),
        SEQUENCE(min(time), max(time), 1s)) AS interpolated_temperature,
        INTERPOLATE_LOCF(
        CREATE_TIME_SERIES(time, status),
        SEQUENCE(min(time), max(time), 1s)) AS locf_status
FROM "TimeSeriesDb-Tc4D7m7fPQQd"."TimeSeriesRawTable-9vgA4lStVsUx"
WHERE measure_name = 'temperature' AND time >= ago(15m)
GROUP BY sensor_id


-- Some values in the time series are missing
SELECT sensor_id,
        CREATE_TIME_SERIES(time, measure_value::double) as temperature_ts,
        CREATE_TIME_SERIES(time, status) as status_ts
  FROM "TimeSeriesDb-Tc4D7m7fPQQd"."TimeSeriesRawTable-9vgA4lStVsUx"
  WHERE measure_name = 'temperature' AND time >= ago(1m)
  GROUP BY sensor_id